PowerUSB Note :

	The source code has been compiled and tested on Ubuntu 11.10 with no issues. The usage of packages and installation of the packages hereby mentioned are with respect to Ubuntu. For other than Ubuntu based systems use the equivalent platform specific packages and install procedure.

PowerUSB usage procedure :
	
	Before making use of powerusb application make sure the following packages are installed :
		1. libudev
		2. libudev-dev
		3. libusb-1.0-0-dev

	To install the above packages, run the following commands in the terminal
		- sudo apt-get install libudev
		- sudo apt-get install libudev-dev
		- sudo apt-get install libusb-1.0-0-dev

Source Directory Structure :

	- lib   (contains the 32bit and 64bit versions of shared libraries libpowerusb.so and libhid.so)

	- udev rules (contains udev rules for Redhat and Debian based systems, place 99-powerusb.rules into /etc/udev/rules.d with respect to the system)

	- compile (Procedure to compile is mentioned in this file)


99-powerusb.rules :

	This is a udev file for HIDAPI devices which changes the permissions to 0666 (world readable/writable) for a specified device on Linux systems. Drop this file into /etc/udev/rules.d and unplug and re-plug your device. This is all that is necessary to see the new permissions. If it is decided not to drop this file in /etc/udev/rules.d then the application can be used with only super user privileges or log in as super user and assign read and write permissions for the device.

PowerUSB API :

	The lib directory contains 32bit and 64bit versions of shared object files named libpowerusb.so and libhid.so. libpowerusb.so implements the PowerUSB API. Use either 32bit or 64bit shared libraries as per requirement. libpowerusb.so internally makes use of libhid.so which implements the HID API for linux platforms.

	The following example shows how to invoke functions from the libpowerusb.so PowerUSB API.

		- In order to invoke functions from the libpowerusb.so, the shared object library libpowerusb.so has to be loaded into the memory as follows 
			#include <dlfcn.h>			
			void *sharedLibraryHandle = NULL;
			void Classname::loadSharedLibrary()
			{
				sharedLibraryHandle = dlopen ("./lib/32bit/libpowerusb.so", RTLD_LAZY);
				if (!sharedLibraryHandle) 
				{
				    fputs (dlerror(), stderr);
				    sharedLibraryHandle = NULL;
				    exit(1);
				}
			}

		- Next to call functions from libpowerusb.so declare function pointers for the respective functions.
			Example : - In order to call the function 'SetPortPowerUSB' from libpowerusb.so declare the function pointer as 
				    int (*SetPortPowerUSB_Address)(int, int, int); 
				  - The function can be called by the following commands 
				    SetPortPowerUSB_Address = (int (*)(int, int, int))dlsym(sharedLibraryHandle, "SetPortPowerUSB");
		                    (*SetPortPowerUSB_Address)(1, -1, -1);
				  - The above code sets the powerusb port states to port1 = on, port2 = off and port3 = off.

		- In the same way other functions can be called from libpowerusb.so
